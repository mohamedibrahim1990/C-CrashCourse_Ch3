#include <iostream>
#include <map>

struct ClockOfTheLongNow{
    ClockOfTheLongNow(){
        year=2019;    
    }
    ClockOfTheLongNow(int year_in){
        if(!set_year(year_in)){
            year=2019;
        }
    }

    void add_year(){
        year++;
    }

    bool set_year(int new_year){
        if(new_year<2019) return false;
        year= new_year;
        return true;
    }

    int get_year(){
        return year;
    }

private:
    int year;
};
int main() { 
    ClockOfTheLongNow clock;
    ClockOfTheLongNow * clock_ptr =&clock;
    clock_ptr->set_year(2020);
    printf("Address of Clock: %p\n", clock_ptr);
    printf("Value of clock's year: %d\n", clock_ptr->get_year());
    printf("Value of clock's year: %d\n", (*clock_ptr).get_year());
    std::cout << "===============================" <<std::endl;
    int * my_ptr{};
    int x{14};
    my_ptr=&x;
    std::cout << my_ptr << std::endl;
    printf("The value of my_ptr is %p\n", my_ptr);
    if(my_ptr){
        std::cout <<"Pointer my_ptr is not empty" << std::endl;
    }

    int gettysburg{};
    printf("gettysburg: %d\n", gettysburg);
    int* gettysburg_address=& gettysburg;
    printf("Value at gettysburg value is %d\n", *gettysburg_address);
    printf("&gettysburg_address: %p\n", gettysburg_address);
    std::cout << *gettysburg_address <<  std::endl;
    *gettysburg_address = 17325;
     printf("Value at gettysburg value is %d\n", *gettysburg_address);
    printf("&gettysburg_address: %p\n", gettysburg_address);

    std::map<int, int> m{{1,1}, {2,2}};
    for(auto&e: m){
        std::cout << e.first << " " << e.second << std::endl;
     }
    }
